#ifndef _LAYER_layer_5_H_
#define _LAYER_layer_5_H_


#include <NetworkConfig.h>


#define layer_5_type "dense convolution"

sLayerGeometry layer_5_input_geometry = {14, 14, 16};
sLayerGeometry layer_5_output_geometry = {14, 14, 24};
sLayerGeometry layer_5_kernel_geometry = {3, 3, 8};

#define layer_5_weights_size ((unsigned int)1152) //array size
#define layer_5_weights_range ((nn_t)559) //multiply neuron result with range/1024

const nn_weight_t layer_5_weights[]={
0, -18, -18, -11, -20, 0, 0, 0, 0, 22, 19, 7, 0, 0, -3, 0, 
0, 0, 0, 0, 0, 33, 20, 10, 14, 11, 43, -24, -23, 0, -40, -35, 
0, 31, 45, 51, -22, 0, 0, -127, -101, 0, -7, 0, 10, 22, 19, 39, 
0, 0, 0, 2, 0, 0, 7, 39, 23, 0, -8, -14, 0, -9, -20, 0, 
-24, -21, -3, -29, -7, 7, 8, 0, 0, 0, 0, 0, 0, 0, 60, 41, 
20, -16, 0, 0, 8, 0, 0, 11, 10, 0, -6, -22, 0, -4, -32, -22, 
13, 0, 0, 0, 0, 0, 1, 0, 0, 11, 9, 0, -15, 0, 0, 0, 
0, 0, 6, 0, 0, 0, 0, 13, 0, -15, -15, 1, 0, 0, 0, 1, 
15, 0, 9, 16, -1, -19, -25, 18, 7, 4, 0, 0, 0, 0, 0, 0, 
-6, 9, 25, 0, 9, 14, 0, 0, 0, 0, 0, 3, 0, 0, 38, 0, 
0, 23, 0, 0, 32, -9, 0, 0, -21, -13, -26, 0, 1, 4, 0, 1, 
0, -11, -2, -6, 14, 19, 2, 10, 21, 10, -6, 0, 0, -2, -11, 0, 
-3, 0, 21, 0, 0, 40, 0, -3, -4, 0, 0, 0, 2, 0, 12, -8, 
6, 36, 0, 6, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 19, 
2, -4, 0, 11, -11, 0, 0, 0, 0, 0, 9, 6, 2, 2, 8, 0, 
-32, -10, -11, -8, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, -17, 
9, 22, -2, -7, 6, -25, -4, 1, -38, -10, 16, -37, 0, 10, -32, -16, 
-59, -15, -25, -10, -37, -43, 27, -9, -10, -10, -17, -1, 37, 10, 0, 46, 
-14, -13, -34, 32, 12, -20, 13, 25, -23, -2, -4, 15, -8, -2, 12, -20, 
-3, 0, -37, -64, -24, 11, -36, -93, -18, -29, -59, -7, -12, -55, 42, -31, 
-52, 54, -19, -3, -69, -35, -40, 12, 0, -8, 49, 4, 0, 23, 10, 0, 
16, 3, 0, -19, 0, 1, -27, -74, -38, 55, 23, -50, 33, 22, -41, -17, 
-21, -10, 19, 4, -10, 3, 11, -21, 7, 4, 4, -6, -1, 27, 34, 30, 
14, 32, 13, 19, -6, -5, -9, 1, 8, 3, -47, -25, 10, -32, -33, -18, 
36, 0, 18, -6, 27, 22, -23, 0, 21, -8, -19, 12, 0, 3, 10, 3, 
-5, -2, 15, -1, 1, 21, 26, -8, 8, 8, 14, -20, 6, 9, 36, -26, 
-36, 14, -6, -3, -23, -24, -26, 62, 33, 5, -1, 12, 16, -21, 22, 22, 
-4, -14, -18, 31, -23, -8, 48, -19, -12, 14, 2, -19, 30, 0, 9, 26, 
13, 17, -26, -9, 38, -29, 3, 35, -26, 21, 72, 10, 0, -19, -8, -25, 
-58, 16, -43, -77, 5, -10, 4, -3, -5, -46, 4, -7, -8, 20, 10, -12, 
19, 12, -31, 9, 8, -5, 57, 37, 7, 45, -9, -28, -3, -32, -63, 13, 
-37, 4, 24, -68, 2, 43, -16, -1, 8, 7, -7, -5, 4, 10, -2, 14, 
3, 6, 0, -11, 15, -4, 0, 27, 6, 14, 20, 17, 23, 15, 4, 4, 
11, 4, 4, 20, -11, -16, 22, -5, -28, 32, 16, 4, -3, -13, -27, 4, 
-12, -6, 7, 2, 16, 17, 0, -18, 15, 0, -34, 22, 14, -9, 0, 19, 
7, -10, 1, -9, -13, -9, -5, 9, -10, -5, 4, -31, -5, 27, -15, -10, 
11, 31, 11, 24, 3, -58, 13, -36, -76, 0, 1, 14, 0, -16, -8, 30, 
3, -25, 16, -6, -78, -66, -60, -17, -66, -17, -1, 9, -39, -38, 2, -31, 
-21, -15, -52, -10, 31, 5, 13, 24, 20, 1, -17, -35, -29, 2, 25, 40, 
-3, 17, 22, 6, -6, -4, -42, 16, 15, 4, 39, 13, -32, -37, -33, 16, 
18, -13, 18, 11, -80, -5, -38, -63, 0, -6, 7, 5, -8, 6, 59, 92, 
105, 1, 5, 14, 2, -19, -22, -14, -12, -7, -7, -1, 17, 2, 9, 9, 
-5, -7, 8, 25, 17, 21, 15, 0, -3, 19, -4, 2, 16, 18, 39, 7, 
8, -6, -7, -15, -9, 16, 6, 17, 6, 8, 3, 9, 4, -3, -15, 9, 
40, -19, 8, 27, 0, -2, -30, -9, -11, 8, -33, -9, 1, -8, 20, 0, 
4, 30, 19, 0, 17, 3, 38, 29, -79, -3, -6, 8, -8, -12, 26, 8, 
8, 19, -5, -58, -117, -59, -105, -18, -99, -88, -45, 42, 10, 14, 7, 2, 
4, -20, -2, -37, 29, 33, 35, -1, 11, -13, 6, -22, -55, 1, 7, 13, 
0, 12, 17, 8, 5, -10, -1, 8, 23, 7, -29, -17, 16, -33, -46, 10, 
21, -2, -23, 11, -44, 8, 14, -48, -7, 0, -7, 2, -5, 5, 13, 7, 
32, -8, 1, -8, 0, -11, -13, 10, 18, 16, 29, 5, 50, 13, -1, 0, 
-24, -13, -27, 2, -10, 8, -6, -7, 13, -5, 10, 26, 10, 16, 4, 3, 
0, -49, -7, -19, -27, 9, -9, 7, -2, -7, -6, 4, 0, 21, 0, -17, 
16, 2, -27, -30, -20, -15, 14, 21, 0, -4, 17, 13, 11, 4, 40, 42, 
10, 18, 4, 15, -3, -42, 22, -25, -27, 9, 18, 18, 3, 6, 29, -6, 
-8, 3, -6, 8, 35, -70, -39, 3, 10, 50, 57, 22, -44, -56, -30, -35, 
-48, 3, -21, -27, -22, -28, -38, -3, -1, -19, -41, -28, -16, -19, -9, -17, 
13, 15, 14, 4, -1, 19, -23, -31, -43, -13, 5, 11, -12, -13, -10, 17, 
14, 29, 25, -8, -42, 18, -14, -20, -5, 0, 0, -3, 0, 13, -16, 6, 
0, 3, 33, 54, -13, -7, 2, -11, -18, 0, 13, -16, -7, -6, -24, -1, 
6, -8, -12, -4, 4, 14, -6, -2, 0, -35, -13, -12, -4, 18, 31, -4, 
-5, 12, -23, -28, 21, -6, 0, 7, 2, -1, 15, -23, -9, -16, -37, -36, 
-2, -3, 13, 34, -9, 4, -5, 24, 11, 20, 17, 7, 19, 45, 29, -13, 
-4, -10, -3, -9, -17, -66, 17, -34, -49, 6, 10, 13, 0, 3, 0, 2, 
-2, -21, -3, 13, 35, -50, -64, -94, -9, -6, -25, -23, -69, -25, -30, -58, 
-41, -32, -39, 9, -20, -12, -27, -5, -19, -37, -6, -7, -14, 12, -6, -27, 
10, -4, -10, 20, 14, 5, -4, -16, -16, -12, -23, -31, 33, 8, -3, -22, 
-2, 3, 7, -21, -47, 21, -38, -47, -4, -4, 1, 7, 6, 21, 21, 19, 
19, 13, 13, 29, 10, 3, 9, -15, -4, 8, -18, -5, 3, -3, 2, -9, 
8, -2, 12, 28, 2, 7, 7, 17, 11, 2, 3, -4, -1, 10, 27, -1, 
11, 16, -12, -11, 21, 3, -16, -7, 24, 5, 14, 16, 1, -3, -31, -43, 
-14, 26, 19, 29, 10, -8, -8, 15, -4, 3, 13, -1, 7, 44, 24, 17, 
};




#define layer_5_bias_size ((unsigned int)8) //array size
#define layer_5_bias_range ((nn_t)62) //multiply neuron result with range/1024

const nn_weight_t layer_5_bias[]={
88, -52, 80, -127, 37, -11, 106, 87, };


#endif
