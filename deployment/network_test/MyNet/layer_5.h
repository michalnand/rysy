#ifndef _LAYER_layer_5_H_
#define _LAYER_layer_5_H_


#include <NetworkConfig.h>


#define layer_5_type "dense convolution"

sLayerGeometry layer_5_input_geometry = {14, 14, 16};
sLayerGeometry layer_5_output_geometry = {14, 14, 24};
sLayerGeometry layer_5_kernel_geometry = {3, 3, 8};

#define layer_5_weights_size ((unsigned int)1152) //array size
#define layer_5_weights_range ((nn_t)476) //multiply neuron result with range/1024

const nn_weight_t layer_5_weights[]={
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
20, 15, 37, 10, -23, -13, 14, 22, 40, 28, -24, 26, -12, -44, 19, 7, 
9, 39, -13, -16, 10, -35, -30, -16, -18, -11, -21, -56, -17, -39, -32, 31, 
7, 11, -31, -13, -17, -25, -6, -33, -25, -3, 15, 32, -43, -42, -25, 18, 
3, 20, 15, 23, 17, -34, -22, 12, -93, -38, 38, -44, -60, -90, 28, -8, 
-57, 53, 23, 6, 8, -49, 14, 49, -34, -20, 76, 41, 21, -7, 60, 38, 
-111, -52, -57, -69, -40, -42, -18, -9, 56, 15, -36, 13, 20, -5, 21, 22, 
-16, -56, 18, 31, -2, -43, 45, 36, -13, 59, 53, -42, -57, -22, 45, 2, 
-41, -40, -66, 32, 5, -26, -15, 37, 40, 11, 19, -9, 15, 30, 32, 12, 
19, 3, 11, 11, 0, 5, 24, 46, 21, 13, 39, 12, 19, 11, 9, 11, 
-5, -23, 8, -10, -22, -19, -30, 5, 9, -19, -11, 7, 5, 23, 4, 6, 
-48, 3, 14, 20, -55, -60, -26, 21, 43, -2, -9, 43, 39, -48, 3, 6, 
58, -33, -54, 20, -5, -2, 22, 27, 41, 7, 17, 35, 15, 23, 8, 20, 
-1, -17, 20, 15, -18, 0, -9, 16, 27, 39, 58, 60, 28, 15, 13, 51, 
-21, -8, -65, -73, 25, 30, 47, -11, -22, 18, 4, -1, 14, 26, 60, 93, 
51, 66, 75, 57, 56, 46, 77, 47, -1, 12, -41, -7, -67, -63, -1, 39, 
9, -10, 18, -6, -28, -13, -66, -26, -50, 4, 30, -22, 13, 46, -5, 16, 
5, -19, -2, 11, 9, 12, -2, -39, 47, -23, -18, -5, 17, -11, -7, -3, 
1, -19, -35, 9, 14, 12, 7, 17, -32, -50, -72, -65, -31, 4, 10, 0, 
13, 19, 18, 5, -14, -18, 6, 16, -14, 0, 8, -29, -21, 0, -22, -10, 
4, -25, -48, -47, -28, 43, 75, 0, -7, 2, -2, -1, -85, -46, -51, -8, 
-51, 42, 16, -21, 17, -27, 14, -15, -53, -83, 7, 10, -103, 10, 8, -9, 
30, 5, -6, -37, 1, -42, -4, 28, -81, 11, 27, 33, 40, -44, 41, 14, 
-56, 36, 14, -51, 59, 19, -119, 28, 1, -20, -35, -38, -58, -77, -85, -21, 
-73, 9, 10, 0, -6, 1, -45, 64, 22, -5, 86, 28, 92, -1, -15, 3, 
-9, 1, -23, -12, 12, 9, 14, 28, 73, -33, -1, -59, -29, 1, -9, -13, 
23, 20, -66, 10, -7, -87, 18, -37, -28, 8, 29, 8, 3, 34, -14, -20, 
18, -31, 14, 18, 3, -32, 10, 3, -13, 10, -13, 9, -10, 10, 1, 9, 
7, -13, 40, -8, -12, 0, -5, -7, 44, -8, 11, 18, -22, -2, 9, -13, 
19, 8, -14, 44, -21, 15, 39, 30, -12, -23, 22, -14, 22, -29, -12, 27, 
-25, 30, 6, -28, -9, -95, 31, -11, -68, 12, -13, 28, -19, 7, 43, -16, 
27, 45, -51, -19, 14, 38, 9, -37, -20, -56, -5, 30, -41, -62, -46, -53, 
-47, -124, -39, -29, 28, -10, 46, 41, -6, -2, -18, -9, 38, 12, -2, -32, 
-121, -48, -32, -34, 23, 18, 8, -15, 47, -25, -3, 14, -17, -33, -66, -61, 
-20, 0, 10, 18, -15, -73, -64, -19, -6, -6, -20, 5, -36, 29, 78, 72, 
96, 49, 3, 45, -6, -13, 11, -53, -42, 41, 0, -8, -3, -4, 20, 44, 
36, 6, 3, 30, 7, -6, -5, -1, -3, -12, -25, -10, -1, -17, -4, -44, 
-3, 23, 19, 27, 34, 14, -10, 33, 9, 5, 51, 22, -6, 0, -43, -34, 
18, -19, -17, 41, 25, -41, -27, -3, -20, -15, 3, -6, 7, 42, -34, 13, 
-15, 20, 49, 12, 20, 33, 0, -12, -31, 3, 1, -30, 1, -1, -37, 27, 
8, 6, -8, -19, 46, -11, 17, 60, -20, -4, 22, -5, -18, 20, -11, -48, 
-43, 10, -1, 6, -20, -48, -6, -32, -3, 29, -3, 7, 54, 57, -4, -11, 
25, -39, -79, -25, -61, -18, -73, -23, -11, -76, -25, 0, -17, -11, 62, 4, 
-20, -27, 9, 13, 49, 28, 50, 65, 43, 22, 25, -30, -9, -24, -51, -43, 
-33, -80, 14, -16, -65, 31, -8, 9, 10, 12, 4, -24, -40, -21, 14, 7, 
-11, 7, 16, -5, 5, -16, 2, -19, -1, 15, -3, -3, 3, -7, -10, -1, 
4, 3, 8, -3, 13, -12, -7, 0, 12, 13, 31, -2, 25, 39, 12, -20, 
-4, 30, 26, 53, -5, 6, -4, 18, 1, -32, 2, -7, 7, -15, 0, -29, 
13, 28, 65, 14, 15, 29, 20, 0, -39, 28, -32, -59, 9, 7, -25, 9, 
22, 50, 2, 3, 42, 26, -12, -3, 0, -41, -83, -28, 66, 56, -26, 42, 
51, -24, -12, 41, 13, 34, 52, 9, 14, 46, 9, 10, 20, 28, -61, -127, 
-59, -78, -59, 26, -13, 1, 12, 12, 65, 8, 39, 88, -10, 53, 83, 17, 
0, 2, 15, -6, 8, -12, -39, 35, 10, 14, -30, -20, -23, -65, -16, -34, 
-27, 13, 19, -27, -10, 13, -9, -25, -12, -17, -20, -14, -14, -25, -11, -8, 
-13, 5, 25, -11, -7, 1, 4, -30, -6, -30, -18, 10, -33, -26, -17, -31, 
-12, 14, 9, -7, 27, -29, -9, 3, 0, 9, 15, -4, 17, 9, -7, 7, 
14, 19, 0, 1, 7, -27, -63, 35, 16, -15, 9, -9, -27, 9, -30, -41, 
};




#define layer_5_bias_size ((unsigned int)8) //array size
#define layer_5_bias_range ((nn_t)82) //multiply neuron result with range/1024

const nn_weight_t layer_5_bias[]={
-22, -45, -68, -44, -81, 101, 23, -127, };


#endif
