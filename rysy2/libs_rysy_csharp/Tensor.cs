//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Tensor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Tensor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Tensor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Tensor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          rysyPINVOKE.delete_Tensor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Tensor() : this(rysyPINVOKE.new_Tensor__SWIG_0(), true) {
  }

  public Tensor(Tensor other) : this(rysyPINVOKE.new_Tensor__SWIG_1(Tensor.getCPtr(other)), true) {
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public Tensor(uint width, uint height, uint depth, uint time) : this(rysyPINVOKE.new_Tensor__SWIG_3(width, height, depth, time), true) {
  }

  public Tensor(uint width, uint height, uint depth) : this(rysyPINVOKE.new_Tensor__SWIG_4(width, height, depth), true) {
  }

  public Tensor(Shape shape) : this(rysyPINVOKE.new_Tensor__SWIG_5(Shape.getCPtr(shape)), true) {
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint w() {
    uint ret = rysyPINVOKE.Tensor_w(swigCPtr);
    return ret;
  }

  public uint h() {
    uint ret = rysyPINVOKE.Tensor_h(swigCPtr);
    return ret;
  }

  public uint d() {
    uint ret = rysyPINVOKE.Tensor_d(swigCPtr);
    return ret;
  }

  public uint t() {
    uint ret = rysyPINVOKE.Tensor_t(swigCPtr);
    return ret;
  }

  public uint size() {
    uint ret = rysyPINVOKE.Tensor_size(swigCPtr);
    return ret;
  }

  public Shape shape() {
    Shape ret = new Shape(rysyPINVOKE.Tensor_shape(swigCPtr), true);
    return ret;
  }

  public sShape shape_struct() {
    sShape ret = new sShape(rysyPINVOKE.Tensor_shape_struct(swigCPtr), true);
    return ret;
  }

  public void init(uint width, uint height, uint depth, uint time) {
    rysyPINVOKE.Tensor_init__SWIG_0(swigCPtr, width, height, depth, time);
  }

  public void init(uint width, uint height, uint depth) {
    rysyPINVOKE.Tensor_init__SWIG_1(swigCPtr, width, height, depth);
  }

  public void init(Shape shape) {
    rysyPINVOKE.Tensor_init__SWIG_2(swigCPtr, Shape.getCPtr(shape));
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_from_host(SWIGTYPE_p_float v) {
    rysyPINVOKE.Tensor_set_from_host__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(v));
  }

  public void set_from_host(SWIGTYPE_p_std__vectorT_float_t v) {
    rysyPINVOKE.Tensor_set_from_host__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_float_t.getCPtr(v));
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_to_host(SWIGTYPE_p_float v) {
    rysyPINVOKE.Tensor_set_to_host__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(v));
  }

  public void set_to_host(SWIGTYPE_p_std__vectorT_float_t v) {
    rysyPINVOKE.Tensor_set_to_host__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_float_t.getCPtr(v));
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_const(float value) {
    rysyPINVOKE.Tensor_set_const(swigCPtr, value);
  }

  public void clear() {
    rysyPINVOKE.Tensor_clear(swigCPtr);
  }

  public void set_random(float range) {
    rysyPINVOKE.Tensor_set_random(swigCPtr, range);
  }

  public void set(uint x, uint y, uint z, uint t, float value) {
    rysyPINVOKE.Tensor_set(swigCPtr, x, y, z, t, value);
  }

  public float get(uint x, uint y, uint z, uint t) {
    float ret = rysyPINVOKE.Tensor_get(swigCPtr, x, y, z, t);
    return ret;
  }

  public void print() {
    rysyPINVOKE.Tensor_print(swigCPtr);
  }

  public void save(string file_name) {
    rysyPINVOKE.Tensor_save(swigCPtr, file_name);
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(string file_name) {
    rysyPINVOKE.Tensor_load(swigCPtr, file_name);
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool is_valid() {
    bool ret = rysyPINVOKE.Tensor_is_valid(swigCPtr);
    return ret;
  }

  public void add(Tensor rhs) {
    rysyPINVOKE.Tensor_add(swigCPtr, Tensor.getCPtr(rhs));
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void sub(Tensor rhs) {
    rysyPINVOKE.Tensor_sub(swigCPtr, Tensor.getCPtr(rhs));
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void mul(float value) {
    rysyPINVOKE.Tensor_mul(swigCPtr, value);
  }

  public void concatenate(Tensor ta, Tensor tb) {
    rysyPINVOKE.Tensor_concatenate(swigCPtr, Tensor.getCPtr(ta), Tensor.getCPtr(tb));
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void split(Tensor ta, Tensor tb) {
    rysyPINVOKE.Tensor_split(swigCPtr, Tensor.getCPtr(ta), Tensor.getCPtr(tb));
    if (rysyPINVOKE.SWIGPendingException.Pending) throw rysyPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_float v {
    set {
      rysyPINVOKE.Tensor_v_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = rysyPINVOKE.Tensor_v_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

}
