# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rysy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rysy')
    _rysy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rysy', [dirname(__file__)])
        except ImportError:
            import _rysy
            return _rysy
        try:
            _mod = imp.load_module('_rysy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rysy = swig_import_helper()
    del swig_import_helper
else:
    import _rysy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rysy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rysy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rysy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rysy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rysy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rysy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rysy.SwigPyIterator_copy(self)

    def next(self):
        return _rysy.SwigPyIterator_next(self)

    def __next__(self):
        return _rysy.SwigPyIterator___next__(self)

    def previous(self):
        return _rysy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rysy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rysy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rysy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rysy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rysy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rysy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rysy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rysy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorChar___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorChar___bool__(self)

    def __len__(self):
        return _rysy.VectorChar___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorChar___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorChar_pop(self)

    def append(self, x):
        return _rysy.VectorChar_append(self, x)

    def empty(self):
        return _rysy.VectorChar_empty(self)

    def size(self):
        return _rysy.VectorChar_size(self)

    def swap(self, v):
        return _rysy.VectorChar_swap(self, v)

    def begin(self):
        return _rysy.VectorChar_begin(self)

    def end(self):
        return _rysy.VectorChar_end(self)

    def rbegin(self):
        return _rysy.VectorChar_rbegin(self)

    def rend(self):
        return _rysy.VectorChar_rend(self)

    def clear(self):
        return _rysy.VectorChar_clear(self)

    def get_allocator(self):
        return _rysy.VectorChar_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorChar_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorChar_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorChar_push_back(self, x)

    def front(self):
        return _rysy.VectorChar_front(self)

    def back(self):
        return _rysy.VectorChar_back(self)

    def assign(self, n, x):
        return _rysy.VectorChar_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorChar_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorChar_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorChar_reserve(self, n)

    def capacity(self):
        return _rysy.VectorChar_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorChar
    __del__ = lambda self: None
VectorChar_swigregister = _rysy.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorUnsignedChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorUnsignedChar___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorUnsignedChar___bool__(self)

    def __len__(self):
        return _rysy.VectorUnsignedChar___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorUnsignedChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorUnsignedChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorUnsignedChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorUnsignedChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorUnsignedChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorUnsignedChar___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorUnsignedChar_pop(self)

    def append(self, x):
        return _rysy.VectorUnsignedChar_append(self, x)

    def empty(self):
        return _rysy.VectorUnsignedChar_empty(self)

    def size(self):
        return _rysy.VectorUnsignedChar_size(self)

    def swap(self, v):
        return _rysy.VectorUnsignedChar_swap(self, v)

    def begin(self):
        return _rysy.VectorUnsignedChar_begin(self)

    def end(self):
        return _rysy.VectorUnsignedChar_end(self)

    def rbegin(self):
        return _rysy.VectorUnsignedChar_rbegin(self)

    def rend(self):
        return _rysy.VectorUnsignedChar_rend(self)

    def clear(self):
        return _rysy.VectorUnsignedChar_clear(self)

    def get_allocator(self):
        return _rysy.VectorUnsignedChar_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorUnsignedChar_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorUnsignedChar_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorUnsignedChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorUnsignedChar_push_back(self, x)

    def front(self):
        return _rysy.VectorUnsignedChar_front(self)

    def back(self):
        return _rysy.VectorUnsignedChar_back(self)

    def assign(self, n, x):
        return _rysy.VectorUnsignedChar_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorUnsignedChar_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorUnsignedChar_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorUnsignedChar_reserve(self, n)

    def capacity(self):
        return _rysy.VectorUnsignedChar_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorUnsignedChar
    __del__ = lambda self: None
VectorUnsignedChar_swigregister = _rysy.VectorUnsignedChar_swigregister
VectorUnsignedChar_swigregister(VectorUnsignedChar)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorInt___bool__(self)

    def __len__(self):
        return _rysy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorInt_pop(self)

    def append(self, x):
        return _rysy.VectorInt_append(self, x)

    def empty(self):
        return _rysy.VectorInt_empty(self)

    def size(self):
        return _rysy.VectorInt_size(self)

    def swap(self, v):
        return _rysy.VectorInt_swap(self, v)

    def begin(self):
        return _rysy.VectorInt_begin(self)

    def end(self):
        return _rysy.VectorInt_end(self)

    def rbegin(self):
        return _rysy.VectorInt_rbegin(self)

    def rend(self):
        return _rysy.VectorInt_rend(self)

    def clear(self):
        return _rysy.VectorInt_clear(self)

    def get_allocator(self):
        return _rysy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorInt_push_back(self, x)

    def front(self):
        return _rysy.VectorInt_front(self)

    def back(self):
        return _rysy.VectorInt_back(self)

    def assign(self, n, x):
        return _rysy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorInt_reserve(self, n)

    def capacity(self):
        return _rysy.VectorInt_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _rysy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorUnsignedInt___bool__(self)

    def __len__(self):
        return _rysy.VectorUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorUnsignedInt_pop(self)

    def append(self, x):
        return _rysy.VectorUnsignedInt_append(self, x)

    def empty(self):
        return _rysy.VectorUnsignedInt_empty(self)

    def size(self):
        return _rysy.VectorUnsignedInt_size(self)

    def swap(self, v):
        return _rysy.VectorUnsignedInt_swap(self, v)

    def begin(self):
        return _rysy.VectorUnsignedInt_begin(self)

    def end(self):
        return _rysy.VectorUnsignedInt_end(self)

    def rbegin(self):
        return _rysy.VectorUnsignedInt_rbegin(self)

    def rend(self):
        return _rysy.VectorUnsignedInt_rend(self)

    def clear(self):
        return _rysy.VectorUnsignedInt_clear(self)

    def get_allocator(self):
        return _rysy.VectorUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorUnsignedInt_push_back(self, x)

    def front(self):
        return _rysy.VectorUnsignedInt_front(self)

    def back(self):
        return _rysy.VectorUnsignedInt_back(self)

    def assign(self, n, x):
        return _rysy.VectorUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorUnsignedInt_reserve(self, n)

    def capacity(self):
        return _rysy.VectorUnsignedInt_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorUnsignedInt
    __del__ = lambda self: None
VectorUnsignedInt_swigregister = _rysy.VectorUnsignedInt_swigregister
VectorUnsignedInt_swigregister(VectorUnsignedInt)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorFloat___bool__(self)

    def __len__(self):
        return _rysy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorFloat_pop(self)

    def append(self, x):
        return _rysy.VectorFloat_append(self, x)

    def empty(self):
        return _rysy.VectorFloat_empty(self)

    def size(self):
        return _rysy.VectorFloat_size(self)

    def swap(self, v):
        return _rysy.VectorFloat_swap(self, v)

    def begin(self):
        return _rysy.VectorFloat_begin(self)

    def end(self):
        return _rysy.VectorFloat_end(self)

    def rbegin(self):
        return _rysy.VectorFloat_rbegin(self)

    def rend(self):
        return _rysy.VectorFloat_rend(self)

    def clear(self):
        return _rysy.VectorFloat_clear(self)

    def get_allocator(self):
        return _rysy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorFloat_push_back(self, x)

    def front(self):
        return _rysy.VectorFloat_front(self)

    def back(self):
        return _rysy.VectorFloat_back(self)

    def assign(self, n, x):
        return _rysy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _rysy.VectorFloat_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _rysy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorDouble___bool__(self)

    def __len__(self):
        return _rysy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorDouble_pop(self)

    def append(self, x):
        return _rysy.VectorDouble_append(self, x)

    def empty(self):
        return _rysy.VectorDouble_empty(self)

    def size(self):
        return _rysy.VectorDouble_size(self)

    def swap(self, v):
        return _rysy.VectorDouble_swap(self, v)

    def begin(self):
        return _rysy.VectorDouble_begin(self)

    def end(self):
        return _rysy.VectorDouble_end(self)

    def rbegin(self):
        return _rysy.VectorDouble_rbegin(self)

    def rend(self):
        return _rysy.VectorDouble_rend(self)

    def clear(self):
        return _rysy.VectorDouble_clear(self)

    def get_allocator(self):
        return _rysy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorDouble_push_back(self, x)

    def front(self):
        return _rysy.VectorDouble_front(self)

    def back(self):
        return _rysy.VectorDouble_back(self)

    def assign(self, n, x):
        return _rysy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _rysy.VectorDouble_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _rysy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class MatrixInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixInt___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixInt___bool__(self)

    def __len__(self):
        return _rysy.MatrixInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixInt___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixInt_pop(self)

    def append(self, x):
        return _rysy.MatrixInt_append(self, x)

    def empty(self):
        return _rysy.MatrixInt_empty(self)

    def size(self):
        return _rysy.MatrixInt_size(self)

    def swap(self, v):
        return _rysy.MatrixInt_swap(self, v)

    def begin(self):
        return _rysy.MatrixInt_begin(self)

    def end(self):
        return _rysy.MatrixInt_end(self)

    def rbegin(self):
        return _rysy.MatrixInt_rbegin(self)

    def rend(self):
        return _rysy.MatrixInt_rend(self)

    def clear(self):
        return _rysy.MatrixInt_clear(self)

    def get_allocator(self):
        return _rysy.MatrixInt_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixInt_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixInt_push_back(self, x)

    def front(self):
        return _rysy.MatrixInt_front(self)

    def back(self):
        return _rysy.MatrixInt_back(self)

    def assign(self, n, x):
        return _rysy.MatrixInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixInt_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixInt_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixInt
    __del__ = lambda self: None
MatrixInt_swigregister = _rysy.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixUnsignedInt___bool__(self)

    def __len__(self):
        return _rysy.MatrixUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixUnsignedInt_pop(self)

    def append(self, x):
        return _rysy.MatrixUnsignedInt_append(self, x)

    def empty(self):
        return _rysy.MatrixUnsignedInt_empty(self)

    def size(self):
        return _rysy.MatrixUnsignedInt_size(self)

    def swap(self, v):
        return _rysy.MatrixUnsignedInt_swap(self, v)

    def begin(self):
        return _rysy.MatrixUnsignedInt_begin(self)

    def end(self):
        return _rysy.MatrixUnsignedInt_end(self)

    def rbegin(self):
        return _rysy.MatrixUnsignedInt_rbegin(self)

    def rend(self):
        return _rysy.MatrixUnsignedInt_rend(self)

    def clear(self):
        return _rysy.MatrixUnsignedInt_clear(self)

    def get_allocator(self):
        return _rysy.MatrixUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixUnsignedInt_push_back(self, x)

    def front(self):
        return _rysy.MatrixUnsignedInt_front(self)

    def back(self):
        return _rysy.MatrixUnsignedInt_back(self)

    def assign(self, n, x):
        return _rysy.MatrixUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixUnsignedInt_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixUnsignedInt_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixUnsignedInt
    __del__ = lambda self: None
MatrixUnsignedInt_swigregister = _rysy.MatrixUnsignedInt_swigregister
MatrixUnsignedInt_swigregister(MatrixUnsignedInt)

class MatrixFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixFloat___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixFloat___bool__(self)

    def __len__(self):
        return _rysy.MatrixFloat___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixFloat___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixFloat_pop(self)

    def append(self, x):
        return _rysy.MatrixFloat_append(self, x)

    def empty(self):
        return _rysy.MatrixFloat_empty(self)

    def size(self):
        return _rysy.MatrixFloat_size(self)

    def swap(self, v):
        return _rysy.MatrixFloat_swap(self, v)

    def begin(self):
        return _rysy.MatrixFloat_begin(self)

    def end(self):
        return _rysy.MatrixFloat_end(self)

    def rbegin(self):
        return _rysy.MatrixFloat_rbegin(self)

    def rend(self):
        return _rysy.MatrixFloat_rend(self)

    def clear(self):
        return _rysy.MatrixFloat_clear(self)

    def get_allocator(self):
        return _rysy.MatrixFloat_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixFloat_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixFloat_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixFloat_push_back(self, x)

    def front(self):
        return _rysy.MatrixFloat_front(self)

    def back(self):
        return _rysy.MatrixFloat_back(self)

    def assign(self, n, x):
        return _rysy.MatrixFloat_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixFloat_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixFloat_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixFloat_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixFloat_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixFloat
    __del__ = lambda self: None
MatrixFloat_swigregister = _rysy.MatrixFloat_swigregister
MatrixFloat_swigregister(MatrixFloat)

class MatrixDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixDouble___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixDouble___bool__(self)

    def __len__(self):
        return _rysy.MatrixDouble___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixDouble___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixDouble_pop(self)

    def append(self, x):
        return _rysy.MatrixDouble_append(self, x)

    def empty(self):
        return _rysy.MatrixDouble_empty(self)

    def size(self):
        return _rysy.MatrixDouble_size(self)

    def swap(self, v):
        return _rysy.MatrixDouble_swap(self, v)

    def begin(self):
        return _rysy.MatrixDouble_begin(self)

    def end(self):
        return _rysy.MatrixDouble_end(self)

    def rbegin(self):
        return _rysy.MatrixDouble_rbegin(self)

    def rend(self):
        return _rysy.MatrixDouble_rend(self)

    def clear(self):
        return _rysy.MatrixDouble_clear(self)

    def get_allocator(self):
        return _rysy.MatrixDouble_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixDouble_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixDouble_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixDouble_push_back(self, x)

    def front(self):
        return _rysy.MatrixDouble_front(self)

    def back(self):
        return _rysy.MatrixDouble_back(self)

    def assign(self, n, x):
        return _rysy.MatrixDouble_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixDouble_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixDouble_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixDouble_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixDouble_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixDouble
    __del__ = lambda self: None
MatrixDouble_swigregister = _rysy.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)

class ImageLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageLoad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_ImageLoad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ImageLoad
    __del__ = lambda self: None

    def load(self, file_name, load_grayscale=False, normalise=False):
        return _rysy.ImageLoad_load(self, file_name, load_grayscale, normalise)

    def get(self):
        return _rysy.ImageLoad_get(self)

    def width(self):
        return _rysy.ImageLoad_width(self)

    def height(self):
        return _rysy.ImageLoad_height(self)

    def channels(self):
        return _rysy.ImageLoad_channels(self)

    def grayscale(self):
        return _rysy.ImageLoad_grayscale(self)

    def normalise_image(self, min=0.0, max=1.0):
        return _rysy.ImageLoad_normalise_image(self, min, max)
ImageLoad_swigregister = _rysy.ImageLoad_swigregister
ImageLoad_swigregister(ImageLoad)

class ImageSave(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSave, name)
    __repr__ = _swig_repr

    def __init__(self, width, height, grayscale, display_enabled=False):
        this = _rysy.new_ImageSave(width, height, grayscale, display_enabled)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ImageSave
    __del__ = lambda self: None

    def save(self, file_name, v):
        return _rysy.ImageSave_save(self, file_name, v)

    def show(self, *args):
        return _rysy.ImageSave_show(self, *args)
ImageSave_swigregister = _rysy.ImageSave_swigregister
ImageSave_swigregister(ImageSave)

class JsonConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsonConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsonConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result"] = _rysy.JsonConfig_result_set
    __swig_getmethods__["result"] = _rysy.JsonConfig_result_get
    if _newclass:
        result = _swig_property(_rysy.JsonConfig_result_get, _rysy.JsonConfig_result_set)

    def __init__(self, *args):
        this = _rysy.new_JsonConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_JsonConfig
    __del__ = lambda self: None

    def load(self, json_file_name):
        return _rysy.JsonConfig_load(self, json_file_name)

    def save(self, file_name):
        return _rysy.JsonConfig_save(self, file_name)

    def get(self):
        return _rysy.JsonConfig_get(self)
JsonConfig_swigregister = _rysy.JsonConfig_swigregister
JsonConfig_swigregister(JsonConfig)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_Log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Log
    __del__ = lambda self: None

    def set_output_file_name(self, file_name):
        return _rysy.Log_set_output_file_name(self, file_name)

    def put_string(self, str):
        return _rysy.Log_put_string(self, str)

    def __lshift__(self, *args):
        return _rysy.Log___lshift__(self, *args)
Log_swigregister = _rysy.Log_swigregister
Log_swigregister(Log)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rysy.new_Timer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Timer
    __del__ = lambda self: None

    def get_time(self):
        return _rysy.Timer_get_time(self)

    def get_duration(self):
        return _rysy.Timer_get_duration(self)

    def start(self):
        return _rysy.Timer_start(self)

    def stop(self):
        return _rysy.Timer_stop(self)

    def sleep_ms(self, ms_time):
        return _rysy.Timer_sleep_ms(self, ms_time)

    def delay_ms(self, ms_time):
        return _rysy.Timer_delay_ms(self, ms_time)
Timer_swigregister = _rysy.Timer_swigregister
Timer_swigregister(Timer)

class Batch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Batch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Batch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_Batch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Batch
    __del__ = lambda self: None

    def create(self, dataset):
        return _rysy.Batch_create(self, dataset)

    def get_input_all(self):
        return _rysy.Batch_get_input_all(self)

    def get_output_all(self):
        return _rysy.Batch_get_output_all(self)
Batch_swigregister = _rysy.Batch_swigregister
Batch_swigregister(Batch)

class DatasetInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetInterface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_DatasetInterface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetInterface
    __del__ = lambda self: None

    def get_input_shape(self):
        return _rysy.DatasetInterface_get_input_shape(self)

    def get_output_shape(self):
        return _rysy.DatasetInterface_get_output_shape(self)

    def get_training_count(self):
        return _rysy.DatasetInterface_get_training_count(self)

    def get_testing_count(self):
        return _rysy.DatasetInterface_get_testing_count(self)

    def get_classes_count(self):
        return _rysy.DatasetInterface_get_classes_count(self)

    def set_training_idx(self, idx):
        return _rysy.DatasetInterface_set_training_idx(self, idx)

    def set_random_training_idx(self):
        return _rysy.DatasetInterface_set_random_training_idx(self)

    def get_training_input(self):
        return _rysy.DatasetInterface_get_training_input(self)

    def get_training_output(self):
        return _rysy.DatasetInterface_get_training_output(self)

    def get_training_input_all(self):
        return _rysy.DatasetInterface_get_training_input_all(self)

    def get_training_output_all(self):
        return _rysy.DatasetInterface_get_training_output_all(self)

    def get_testing_input(self, idx):
        return _rysy.DatasetInterface_get_testing_input(self, idx)

    def get_testing_output(self, idx):
        return _rysy.DatasetInterface_get_testing_output(self, idx)

    def get_testing_input_all(self):
        return _rysy.DatasetInterface_get_testing_input_all(self)

    def get_testing_output_all(self):
        return _rysy.DatasetInterface_get_testing_output_all(self)

    def set_input_shape(self, input_shape):
        return _rysy.DatasetInterface_set_input_shape(self, input_shape)

    def set_output_shape(self, output_shape):
        return _rysy.DatasetInterface_set_output_shape(self, output_shape)

    def add_training(self, input, output):
        return _rysy.DatasetInterface_add_training(self, input, output)

    def add_testing(self, input, output):
        return _rysy.DatasetInterface_add_testing(self, input, output)

    def _print(self):
        return _rysy.DatasetInterface__print(self)

    def clear(self):
        return _rysy.DatasetInterface_clear(self)

    def normalise_input(self):
        return _rysy.DatasetInterface_normalise_input(self)

    def normalise_output(self):
        return _rysy.DatasetInterface_normalise_output(self)
DatasetInterface_swigregister = _rysy.DatasetInterface_swigregister
DatasetInterface_swigregister(DatasetInterface)

class DatasetImages(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetImages, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetImages, name)
    __repr__ = _swig_repr

    def __init__(self, json_config_file_name):
        this = _rysy.new_DatasetImages(json_config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetImages
    __del__ = lambda self: None
DatasetImages_swigregister = _rysy.DatasetImages_swigregister
DatasetImages_swigregister(DatasetImages)

class DatasetMnist(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetMnist, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetMnist, name)
    __repr__ = _swig_repr

    def __init__(self, training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name):
        this = _rysy.new_DatasetMnist(training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetMnist
    __del__ = lambda self: None
DatasetMnist_swigregister = _rysy.DatasetMnist_swigregister
DatasetMnist_swigregister(DatasetMnist)

class DatasetMnistRNN(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetMnistRNN, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetMnistRNN, name)
    __repr__ = _swig_repr

    def __init__(self, training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name):
        this = _rysy.new_DatasetMnistRNN(training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetMnistRNN
    __del__ = lambda self: None
DatasetMnistRNN_swigregister = _rysy.DatasetMnistRNN_swigregister
DatasetMnistRNN_swigregister(DatasetMnistRNN)

class DatasetTest(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetTest, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetTest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_DatasetTest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetTest
    __del__ = lambda self: None
DatasetTest_swigregister = _rysy.DatasetTest_swigregister
DatasetTest_swigregister(DatasetTest)

class ClassificationCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_ClassificationCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ClassificationCompare
    __del__ = lambda self: None

    def init(self, classes_count, top_n_count=1):
        return _rysy.ClassificationCompare_init(self, classes_count, top_n_count)

    def add(self, target_output, predicted_output):
        return _rysy.ClassificationCompare_add(self, target_output, predicted_output)

    def compute(self):
        return _rysy.ClassificationCompare_compute(self)

    def is_nan_error(self):
        return _rysy.ClassificationCompare_is_nan_error(self)

    def asString(self):
        return _rysy.ClassificationCompare_asString(self)

    def asJson(self):
        return _rysy.ClassificationCompare_asJson(self)

    def get_accuracy(self):
        return _rysy.ClassificationCompare_get_accuracy(self)

    def get_confusion_matrix(self):
        return _rysy.ClassificationCompare_get_confusion_matrix(self)

    def get_class_success_rate(self):
        return _rysy.ClassificationCompare_get_class_success_rate(self)
ClassificationCompare_swigregister = _rysy.ClassificationCompare_swigregister
ClassificationCompare_swigregister(ClassificationCompare)

class ClassificationExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, experiment_dir, network_config_file):
        this = _rysy.new_ClassificationExperiment(dataset, experiment_dir, network_config_file)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ClassificationExperiment
    __del__ = lambda self: None

    def run(self):
        return _rysy.ClassificationExperiment_run(self)
ClassificationExperiment_swigregister = _rysy.ClassificationExperiment_swigregister
ClassificationExperiment_swigregister(ClassificationExperiment)

class sShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _rysy.sShape_w_set
    __swig_getmethods__["w"] = _rysy.sShape_w_get
    if _newclass:
        w = _swig_property(_rysy.sShape_w_get, _rysy.sShape_w_set)
    __swig_setmethods__["h"] = _rysy.sShape_h_set
    __swig_getmethods__["h"] = _rysy.sShape_h_get
    if _newclass:
        h = _swig_property(_rysy.sShape_h_get, _rysy.sShape_h_set)
    __swig_setmethods__["d"] = _rysy.sShape_d_set
    __swig_getmethods__["d"] = _rysy.sShape_d_get
    if _newclass:
        d = _swig_property(_rysy.sShape_d_get, _rysy.sShape_d_set)
    __swig_setmethods__["t"] = _rysy.sShape_t_set
    __swig_getmethods__["t"] = _rysy.sShape_t_get
    if _newclass:
        t = _swig_property(_rysy.sShape_t_get, _rysy.sShape_t_set)

    def __init__(self):
        this = _rysy.new_sShape()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_sShape
    __del__ = lambda self: None
sShape_swigregister = _rysy.sShape_swigregister
sShape_swigregister(sShape)

class Shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Shape
    __del__ = lambda self: None

    def w(self):
        return _rysy.Shape_w(self)

    def h(self):
        return _rysy.Shape_h(self)

    def d(self):
        return _rysy.Shape_d(self)

    def t(self):
        return _rysy.Shape_t(self)

    def get(self):
        return _rysy.Shape_get(self)

    def set(self, *args):
        return _rysy.Shape_set(self, *args)

    def size(self):
        return _rysy.Shape_size(self)

    def _print(self):
        return _rysy.Shape__print(self)

    def __eq__(self, *args):
        return _rysy.Shape___eq__(self, *args)

    def __ne__(self, *args):
        return _rysy.Shape___ne__(self, *args)
Shape_swigregister = _rysy.Shape_swigregister
Shape_swigregister(Shape)

class Tensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_Tensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Tensor
    __del__ = lambda self: None

    def w(self):
        return _rysy.Tensor_w(self)

    def h(self):
        return _rysy.Tensor_h(self)

    def d(self):
        return _rysy.Tensor_d(self)

    def t(self):
        return _rysy.Tensor_t(self)

    def size(self):
        return _rysy.Tensor_size(self)

    def shape(self):
        return _rysy.Tensor_shape(self)

    def shape_struct(self):
        return _rysy.Tensor_shape_struct(self)

    def init(self, *args):
        return _rysy.Tensor_init(self, *args)

    def set_from_host(self, *args):
        return _rysy.Tensor_set_from_host(self, *args)

    def set_to_host(self, *args):
        return _rysy.Tensor_set_to_host(self, *args)

    def set_const(self, value):
        return _rysy.Tensor_set_const(self, value)

    def clear(self):
        return _rysy.Tensor_clear(self)

    def set_random(self, range):
        return _rysy.Tensor_set_random(self, range)

    def set(self, x, y, z, t, value):
        return _rysy.Tensor_set(self, x, y, z, t, value)

    def get(self, x, y, z, t):
        return _rysy.Tensor_get(self, x, y, z, t)

    def _print(self):
        return _rysy.Tensor__print(self)

    def save(self, file_name):
        return _rysy.Tensor_save(self, file_name)

    def load(self, file_name):
        return _rysy.Tensor_load(self, file_name)

    def is_valid(self):
        return _rysy.Tensor_is_valid(self)

    def add(self, rhs):
        return _rysy.Tensor_add(self, rhs)

    def sub(self, rhs):
        return _rysy.Tensor_sub(self, rhs)

    def mul(self, value):
        return _rysy.Tensor_mul(self, value)

    def concatenate(self, ta, tb):
        return _rysy.Tensor_concatenate(self, ta, tb)

    def split(self, ta, tb):
        return _rysy.Tensor_split(self, ta, tb)

    def concatenate_time_sequence(self, source, max_time_steps=0):
        return _rysy.Tensor_concatenate_time_sequence(self, source, max_time_steps)

    def split_time_sequence(self, dest):
        return _rysy.Tensor_split_time_sequence(self, dest)

    def norm_l2(self):
        return _rysy.Tensor_norm_l2(self)
    __swig_setmethods__["v"] = _rysy.Tensor_v_set
    __swig_getmethods__["v"] = _rysy.Tensor_v_get
    if _newclass:
        v = _swig_property(_rysy.Tensor_v_get, _rysy.Tensor_v_set)
Tensor_swigregister = _rysy.Tensor_swigregister
Tensor_swigregister(Tensor)

class CNN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_CNN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_CNN
    __del__ = lambda self: None

    def get_input_shape(self):
        return _rysy.CNN_get_input_shape(self)

    def get_output_shape(self):
        return _rysy.CNN_get_output_shape(self)

    def forward(self, *args):
        return _rysy.CNN_forward(self, *args)

    def train(self, *args):
        return _rysy.CNN_train(self, *args)

    def train_from_error(self, error):
        return _rysy.CNN_train_from_error(self, error)

    def get_error_back(self):
        return _rysy.CNN_get_error_back(self)

    def set_training_mode(self):
        return _rysy.CNN_set_training_mode(self)

    def unset_training_mode(self):
        return _rysy.CNN_unset_training_mode(self)

    def is_training_mode(self):
        return _rysy.CNN_is_training_mode(self)

    def reset(self):
        return _rysy.CNN_reset(self)

    def add_layer(self, *args):
        return _rysy.CNN_add_layer(self, *args)

    def asString(self):
        return _rysy.CNN_asString(self)

    def _print(self):
        return _rysy.CNN__print(self)

    def save(self, path):
        return _rysy.CNN_save(self, path)

    def load_weights(self, file_name_prefix):
        return _rysy.CNN_load_weights(self, file_name_prefix)

    def get_layers_count(self):
        return _rysy.CNN_get_layers_count(self)

    def get_layer_output_size(self):
        return _rysy.CNN_get_layer_output_size(self)

    def get_layer_output(self, layer_idx):
        return _rysy.CNN_get_layer_output(self, layer_idx)

    def get_layer_weights_flag(self, layer_idx):
        return _rysy.CNN_get_layer_weights_flag(self, layer_idx)

    def get_layer_activation_flag(self, layer_idx):
        return _rysy.CNN_get_layer_activation_flag(self, layer_idx)
CNN_swigregister = _rysy.CNN_swigregister
CNN_swigregister(CNN)

class RNN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RNN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RNN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_RNN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_RNN
    __del__ = lambda self: None

    def get_input_shape(self):
        return _rysy.RNN_get_input_shape(self)

    def get_output_shape(self):
        return _rysy.RNN_get_output_shape(self)

    def forward(self, *args):
        return _rysy.RNN_forward(self, *args)

    def train(self, *args):
        return _rysy.RNN_train(self, *args)

    def train_from_error(self, sequence_error):
        return _rysy.RNN_train_from_error(self, sequence_error)

    def get_error_back(self):
        return _rysy.RNN_get_error_back(self)

    def set_training_mode(self):
        return _rysy.RNN_set_training_mode(self)

    def unset_training_mode(self):
        return _rysy.RNN_unset_training_mode(self)

    def is_training_mode(self):
        return _rysy.RNN_is_training_mode(self)

    def reset(self):
        return _rysy.RNN_reset(self)

    def add_layer(self, *args):
        return _rysy.RNN_add_layer(self, *args)

    def asString(self):
        return _rysy.RNN_asString(self)

    def _print(self):
        return _rysy.RNN__print(self)

    def save(self, path):
        return _rysy.RNN_save(self, path)

    def load_weights(self, file_name_prefix):
        return _rysy.RNN_load_weights(self, file_name_prefix)

    def get_layers_count(self):
        return _rysy.RNN_get_layers_count(self)

    def get_layer_output_size(self):
        return _rysy.RNN_get_layer_output_size(self)

    def get_layer_output(self, layer_idx):
        return _rysy.RNN_get_layer_output(self, layer_idx)

    def get_layer_weights_flag(self, layer_idx):
        return _rysy.RNN_get_layer_weights_flag(self, layer_idx)

    def get_layer_activation_flag(self, layer_idx):
        return _rysy.RNN_get_layer_activation_flag(self, layer_idx)
RNN_swigregister = _rysy.RNN_swigregister
RNN_swigregister(RNN)

class CNNVisualisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNNVisualisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNNVisualisation, name)
    __repr__ = _swig_repr

    def __init__(self, nn):
        this = _rysy.new_CNNVisualisation(nn)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_CNNVisualisation
    __del__ = lambda self: None

    def process(self):
        return _rysy.CNNVisualisation_process(self)

    def save(self, file_name_prefix):
        return _rysy.CNNVisualisation_save(self, file_name_prefix)
CNNVisualisation_swigregister = _rysy.CNNVisualisation_swigregister
CNNVisualisation_swigregister(CNNVisualisation)

class ExperienceReplayBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExperienceReplayBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExperienceReplayBuffer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_ExperienceReplayBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ExperienceReplayBuffer
    __del__ = lambda self: None

    def init(self, buffer_size, state_size, actions_count):
        return _rysy.ExperienceReplayBuffer_init(self, buffer_size, state_size, actions_count)

    def add(self, state, q_values, action, reward, terminal=False):
        return _rysy.ExperienceReplayBuffer_add(self, state, q_values, action, reward, terminal)

    def is_full(self):
        return _rysy.ExperienceReplayBuffer_is_full(self)

    def compute(self, gamma=0.99, clamp_value=10.0, curiosity_ratio=0.0):
        return _rysy.ExperienceReplayBuffer_compute(self, gamma, clamp_value, curiosity_ratio)

    def set_curiosity(self, idx, curiosity):
        return _rysy.ExperienceReplayBuffer_set_curiosity(self, idx, curiosity)

    def size(self):
        return _rysy.ExperienceReplayBuffer_size(self)

    def _print(self):
        return _rysy.ExperienceReplayBuffer__print(self)

    def get_state(self):
        return _rysy.ExperienceReplayBuffer_get_state(self)

    def get_q_values(self):
        return _rysy.ExperienceReplayBuffer_get_q_values(self)

    def get_action(self):
        return _rysy.ExperienceReplayBuffer_get_action(self)

    def get_reward(self):
        return _rysy.ExperienceReplayBuffer_get_reward(self)

    def get_curiosity(self):
        return _rysy.ExperienceReplayBuffer_get_curiosity(self)

    def get_terminal(self):
        return _rysy.ExperienceReplayBuffer_get_terminal(self)
ExperienceReplayBuffer_swigregister = _rysy.ExperienceReplayBuffer_swigregister
ExperienceReplayBuffer_swigregister(ExperienceReplayBuffer)

class DQN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_DQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DQN
    __del__ = lambda self: None

    def init(self, *args):
        return _rysy.DQN_init(self, *args)

    def add_layer(self, *args):
        return _rysy.DQN_add_layer(self, *args)

    def forward(self, *args):
        return _rysy.DQN_forward(self, *args)

    def get_q_values(self):
        return _rysy.DQN_get_q_values(self)

    def add(self, *args):
        return _rysy.DQN_add(self, *args)

    def is_full(self):
        return _rysy.DQN_is_full(self)

    def train(self):
        return _rysy.DQN_train(self)

    def _print(self):
        return _rysy.DQN__print(self)

    def print_buffer(self):
        return _rysy.DQN_print_buffer(self)

    def save(self, path):
        return _rysy.DQN_save(self, path)

    def load_weights(self, file_name_prefix):
        return _rysy.DQN_load_weights(self, file_name_prefix)

    def add_activity_map(self):
        return _rysy.DQN_add_activity_map(self)

    def save_activity_map(self, path):
        return _rysy.DQN_save_activity_map(self, path)
DQN_swigregister = _rysy.DQN_swigregister
DQN_swigregister(DQN)

class DQNA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_DQNA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DQNA
    __del__ = lambda self: None

    def init(self, state_shape, actions_count, gamma, replay_buffer_size, features_network_config_file_name, reconstruction_network_config_file_name, q_network_config_file_name):
        return _rysy.DQNA_init(self, state_shape, actions_count, gamma, replay_buffer_size, features_network_config_file_name, reconstruction_network_config_file_name, q_network_config_file_name)

    def forward(self, state):
        return _rysy.DQNA_forward(self, state)

    def get_q_values(self):
        return _rysy.DQNA_get_q_values(self)

    def add(self, state, q_values, action, reward, terminal=False):
        return _rysy.DQNA_add(self, state, q_values, action, reward, terminal)

    def is_full(self):
        return _rysy.DQNA_is_full(self)

    def train(self):
        return _rysy.DQNA_train(self)

    def _print(self):
        return _rysy.DQNA__print(self)

    def print_buffer(self):
        return _rysy.DQNA_print_buffer(self)

    def save(self, path):
        return _rysy.DQNA_save(self, path)

    def load_weights(self, file_name_prefix):
        return _rysy.DQNA_load_weights(self, file_name_prefix)
DQNA_swigregister = _rysy.DQNA_swigregister
DQNA_swigregister(DQNA)

class sICMResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sICMResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sICMResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inverse_loss"] = _rysy.sICMResult_inverse_loss_set
    __swig_getmethods__["inverse_loss"] = _rysy.sICMResult_inverse_loss_get
    if _newclass:
        inverse_loss = _swig_property(_rysy.sICMResult_inverse_loss_get, _rysy.sICMResult_inverse_loss_set)
    __swig_setmethods__["forward_loss"] = _rysy.sICMResult_forward_loss_set
    __swig_getmethods__["forward_loss"] = _rysy.sICMResult_forward_loss_get
    if _newclass:
        forward_loss = _swig_property(_rysy.sICMResult_forward_loss_get, _rysy.sICMResult_forward_loss_set)
    __swig_setmethods__["inverse_clasification_hit"] = _rysy.sICMResult_inverse_clasification_hit_set
    __swig_getmethods__["inverse_clasification_hit"] = _rysy.sICMResult_inverse_clasification_hit_get
    if _newclass:
        inverse_clasification_hit = _swig_property(_rysy.sICMResult_inverse_clasification_hit_get, _rysy.sICMResult_inverse_clasification_hit_set)
    __swig_setmethods__["inverse_clasification_miss"] = _rysy.sICMResult_inverse_clasification_miss_set
    __swig_getmethods__["inverse_clasification_miss"] = _rysy.sICMResult_inverse_clasification_miss_get
    if _newclass:
        inverse_clasification_miss = _swig_property(_rysy.sICMResult_inverse_clasification_miss_get, _rysy.sICMResult_inverse_clasification_miss_set)
    __swig_setmethods__["inverse_classification_success"] = _rysy.sICMResult_inverse_classification_success_set
    __swig_getmethods__["inverse_classification_success"] = _rysy.sICMResult_inverse_classification_success_get
    if _newclass:
        inverse_classification_success = _swig_property(_rysy.sICMResult_inverse_classification_success_get, _rysy.sICMResult_inverse_classification_success_set)

    def __init__(self):
        this = _rysy.new_sICMResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_sICMResult
    __del__ = lambda self: None
sICMResult_swigregister = _rysy.sICMResult_swigregister
sICMResult_swigregister(sICMResult)

class ICM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICM, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_ICM(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ICM
    __del__ = lambda self: None

    def init(self, state_shape, actions_count, network_config_path):
        return _rysy.ICM_init(self, state_shape, actions_count, network_config_path)

    def train(self, replay_buffer):
        return _rysy.ICM_train(self, replay_buffer)

    def forward(self, state_now, state_next, action):
        return _rysy.ICM_forward(self, state_now, state_next, action)

    def get_curiosity(self):
        return _rysy.ICM_get_curiosity(self)

    def get_icm_result(self):
        return _rysy.ICM_get_icm_result(self)

    def _print(self):
        return _rysy.ICM__print(self)

    def save(self, path):
        return _rysy.ICM_save(self, path)

    def load(self, path):
        return _rysy.ICM_load(self, path)
ICM_swigregister = _rysy.ICM_swigregister
ICM_swigregister(ICM)

class DQNCuriosity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNCuriosity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNCuriosity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_DQNCuriosity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DQNCuriosity
    __del__ = lambda self: None

    def init(self, state_shape, actions_count, gamma, curiosity_ratio, replay_buffer_size, config_path):
        return _rysy.DQNCuriosity_init(self, state_shape, actions_count, gamma, curiosity_ratio, replay_buffer_size, config_path)

    def forward(self, *args):
        return _rysy.DQNCuriosity_forward(self, *args)

    def get_q_values(self):
        return _rysy.DQNCuriosity_get_q_values(self)

    def add(self, *args):
        return _rysy.DQNCuriosity_add(self, *args)

    def is_full(self):
        return _rysy.DQNCuriosity_is_full(self)

    def train(self):
        return _rysy.DQNCuriosity_train(self)

    def _print(self):
        return _rysy.DQNCuriosity__print(self)

    def print_buffer(self):
        return _rysy.DQNCuriosity_print_buffer(self)

    def save(self, path):
        return _rysy.DQNCuriosity_save(self, path)

    def load_weights(self, file_name_prefix):
        return _rysy.DQNCuriosity_load_weights(self, file_name_prefix)

    def get_icm_result(self):
        return _rysy.DQNCuriosity_get_icm_result(self)
DQNCuriosity_swigregister = _rysy.DQNCuriosity_swigregister
DQNCuriosity_swigregister(DQNCuriosity)

class StackedState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StackedState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StackedState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_StackedState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_StackedState
    __del__ = lambda self: None

    def init(self, input_shape, frames):
        return _rysy.StackedState_init(self, input_shape, frames)

    def shape(self):
        return _rysy.StackedState_shape(self)

    def set(self, x, y, z, v):
        return _rysy.StackedState_set(self, x, y, z, v)

    def get(self, *args):
        return _rysy.StackedState_get(self, *args)

    def next_frame(self):
        return _rysy.StackedState_next_frame(self)

    def clear(self):
        return _rysy.StackedState_clear(self)

    def _print(self):
        return _rysy.StackedState__print(self)

    def random(self):
        return _rysy.StackedState_random(self)
StackedState_swigregister = _rysy.StackedState_swigregister
StackedState_swigregister(StackedState)

class LayerExport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerExport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerExport, name)
    __repr__ = _swig_repr

    def __init__(self, export_path, json, layer_prefix, input_shape, output_shape):
        this = _rysy.new_LayerExport(export_path, json, layer_prefix, input_shape, output_shape)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_LayerExport
    __del__ = lambda self: None

    def get(self):
        return _rysy.LayerExport_get(self)

    def save(self):
        return _rysy.LayerExport_save(self)
LayerExport_swigregister = _rysy.LayerExport_swigregister
LayerExport_swigregister(LayerExport)

class EmbeddedNetworkTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedNetworkTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedNetworkTest, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, nn):
        this = _rysy.new_EmbeddedNetworkTest(dataset, nn)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_EmbeddedNetworkTest
    __del__ = lambda self: None

    def process(self):
        return _rysy.EmbeddedNetworkTest_process(self)
EmbeddedNetworkTest_swigregister = _rysy.EmbeddedNetworkTest_swigregister
EmbeddedNetworkTest_swigregister(EmbeddedNetworkTest)

class EmbeddedNetworkExport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedNetworkExport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedNetworkExport, name)
    __repr__ = _swig_repr

    def __init__(self, trained_config_file_name):
        this = _rysy.new_EmbeddedNetworkExport(trained_config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_EmbeddedNetworkExport
    __del__ = lambda self: None

    def process(self, export_path, network_prefix):
        return _rysy.EmbeddedNetworkExport_process(self, export_path, network_prefix)
EmbeddedNetworkExport_swigregister = _rysy.EmbeddedNetworkExport_swigregister
EmbeddedNetworkExport_swigregister(EmbeddedNetworkExport)

class NetworkActivity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkActivity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkActivity, name)
    __repr__ = _swig_repr

    def __init__(self, cnn):
        this = _rysy.new_NetworkActivity(cnn)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_NetworkActivity
    __del__ = lambda self: None

    def add(self):
        return _rysy.NetworkActivity_add(self)

    def save(self, output_path):
        return _rysy.NetworkActivity_save(self, output_path)
NetworkActivity_swigregister = _rysy.NetworkActivity_swigregister
NetworkActivity_swigregister(NetworkActivity)

# This file is compatible with both classic and new-style classes.


