# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rysy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rysy')
    _rysy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rysy', [dirname(__file__)])
        except ImportError:
            import _rysy
            return _rysy
        try:
            _mod = imp.load_module('_rysy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rysy = swig_import_helper()
    del swig_import_helper
else:
    import _rysy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rysy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rysy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rysy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rysy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rysy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rysy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rysy.SwigPyIterator_copy(self)

    def next(self):
        return _rysy.SwigPyIterator_next(self)

    def __next__(self):
        return _rysy.SwigPyIterator___next__(self)

    def previous(self):
        return _rysy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rysy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rysy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rysy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rysy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rysy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rysy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rysy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rysy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorChar___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorChar___bool__(self)

    def __len__(self):
        return _rysy.VectorChar___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorChar___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorChar_pop(self)

    def append(self, x):
        return _rysy.VectorChar_append(self, x)

    def empty(self):
        return _rysy.VectorChar_empty(self)

    def size(self):
        return _rysy.VectorChar_size(self)

    def swap(self, v):
        return _rysy.VectorChar_swap(self, v)

    def begin(self):
        return _rysy.VectorChar_begin(self)

    def end(self):
        return _rysy.VectorChar_end(self)

    def rbegin(self):
        return _rysy.VectorChar_rbegin(self)

    def rend(self):
        return _rysy.VectorChar_rend(self)

    def clear(self):
        return _rysy.VectorChar_clear(self)

    def get_allocator(self):
        return _rysy.VectorChar_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorChar_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorChar_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorChar_push_back(self, x)

    def front(self):
        return _rysy.VectorChar_front(self)

    def back(self):
        return _rysy.VectorChar_back(self)

    def assign(self, n, x):
        return _rysy.VectorChar_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorChar_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorChar_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorChar_reserve(self, n)

    def capacity(self):
        return _rysy.VectorChar_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorChar
    __del__ = lambda self: None
VectorChar_swigregister = _rysy.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorUnsignedChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorUnsignedChar___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorUnsignedChar___bool__(self)

    def __len__(self):
        return _rysy.VectorUnsignedChar___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorUnsignedChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorUnsignedChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorUnsignedChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorUnsignedChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorUnsignedChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorUnsignedChar___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorUnsignedChar_pop(self)

    def append(self, x):
        return _rysy.VectorUnsignedChar_append(self, x)

    def empty(self):
        return _rysy.VectorUnsignedChar_empty(self)

    def size(self):
        return _rysy.VectorUnsignedChar_size(self)

    def swap(self, v):
        return _rysy.VectorUnsignedChar_swap(self, v)

    def begin(self):
        return _rysy.VectorUnsignedChar_begin(self)

    def end(self):
        return _rysy.VectorUnsignedChar_end(self)

    def rbegin(self):
        return _rysy.VectorUnsignedChar_rbegin(self)

    def rend(self):
        return _rysy.VectorUnsignedChar_rend(self)

    def clear(self):
        return _rysy.VectorUnsignedChar_clear(self)

    def get_allocator(self):
        return _rysy.VectorUnsignedChar_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorUnsignedChar_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorUnsignedChar_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorUnsignedChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorUnsignedChar_push_back(self, x)

    def front(self):
        return _rysy.VectorUnsignedChar_front(self)

    def back(self):
        return _rysy.VectorUnsignedChar_back(self)

    def assign(self, n, x):
        return _rysy.VectorUnsignedChar_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorUnsignedChar_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorUnsignedChar_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorUnsignedChar_reserve(self, n)

    def capacity(self):
        return _rysy.VectorUnsignedChar_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorUnsignedChar
    __del__ = lambda self: None
VectorUnsignedChar_swigregister = _rysy.VectorUnsignedChar_swigregister
VectorUnsignedChar_swigregister(VectorUnsignedChar)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorInt___bool__(self)

    def __len__(self):
        return _rysy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorInt_pop(self)

    def append(self, x):
        return _rysy.VectorInt_append(self, x)

    def empty(self):
        return _rysy.VectorInt_empty(self)

    def size(self):
        return _rysy.VectorInt_size(self)

    def swap(self, v):
        return _rysy.VectorInt_swap(self, v)

    def begin(self):
        return _rysy.VectorInt_begin(self)

    def end(self):
        return _rysy.VectorInt_end(self)

    def rbegin(self):
        return _rysy.VectorInt_rbegin(self)

    def rend(self):
        return _rysy.VectorInt_rend(self)

    def clear(self):
        return _rysy.VectorInt_clear(self)

    def get_allocator(self):
        return _rysy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorInt_push_back(self, x)

    def front(self):
        return _rysy.VectorInt_front(self)

    def back(self):
        return _rysy.VectorInt_back(self)

    def assign(self, n, x):
        return _rysy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorInt_reserve(self, n)

    def capacity(self):
        return _rysy.VectorInt_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _rysy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorUnsignedInt___bool__(self)

    def __len__(self):
        return _rysy.VectorUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorUnsignedInt_pop(self)

    def append(self, x):
        return _rysy.VectorUnsignedInt_append(self, x)

    def empty(self):
        return _rysy.VectorUnsignedInt_empty(self)

    def size(self):
        return _rysy.VectorUnsignedInt_size(self)

    def swap(self, v):
        return _rysy.VectorUnsignedInt_swap(self, v)

    def begin(self):
        return _rysy.VectorUnsignedInt_begin(self)

    def end(self):
        return _rysy.VectorUnsignedInt_end(self)

    def rbegin(self):
        return _rysy.VectorUnsignedInt_rbegin(self)

    def rend(self):
        return _rysy.VectorUnsignedInt_rend(self)

    def clear(self):
        return _rysy.VectorUnsignedInt_clear(self)

    def get_allocator(self):
        return _rysy.VectorUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorUnsignedInt_push_back(self, x)

    def front(self):
        return _rysy.VectorUnsignedInt_front(self)

    def back(self):
        return _rysy.VectorUnsignedInt_back(self)

    def assign(self, n, x):
        return _rysy.VectorUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorUnsignedInt_reserve(self, n)

    def capacity(self):
        return _rysy.VectorUnsignedInt_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorUnsignedInt
    __del__ = lambda self: None
VectorUnsignedInt_swigregister = _rysy.VectorUnsignedInt_swigregister
VectorUnsignedInt_swigregister(VectorUnsignedInt)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorFloat___bool__(self)

    def __len__(self):
        return _rysy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorFloat_pop(self)

    def append(self, x):
        return _rysy.VectorFloat_append(self, x)

    def empty(self):
        return _rysy.VectorFloat_empty(self)

    def size(self):
        return _rysy.VectorFloat_size(self)

    def swap(self, v):
        return _rysy.VectorFloat_swap(self, v)

    def begin(self):
        return _rysy.VectorFloat_begin(self)

    def end(self):
        return _rysy.VectorFloat_end(self)

    def rbegin(self):
        return _rysy.VectorFloat_rbegin(self)

    def rend(self):
        return _rysy.VectorFloat_rend(self)

    def clear(self):
        return _rysy.VectorFloat_clear(self)

    def get_allocator(self):
        return _rysy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorFloat_push_back(self, x)

    def front(self):
        return _rysy.VectorFloat_front(self)

    def back(self):
        return _rysy.VectorFloat_back(self)

    def assign(self, n, x):
        return _rysy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _rysy.VectorFloat_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _rysy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _rysy.VectorDouble___bool__(self)

    def __len__(self):
        return _rysy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _rysy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _rysy.VectorDouble_pop(self)

    def append(self, x):
        return _rysy.VectorDouble_append(self, x)

    def empty(self):
        return _rysy.VectorDouble_empty(self)

    def size(self):
        return _rysy.VectorDouble_size(self)

    def swap(self, v):
        return _rysy.VectorDouble_swap(self, v)

    def begin(self):
        return _rysy.VectorDouble_begin(self)

    def end(self):
        return _rysy.VectorDouble_end(self)

    def rbegin(self):
        return _rysy.VectorDouble_rbegin(self)

    def rend(self):
        return _rysy.VectorDouble_rend(self)

    def clear(self):
        return _rysy.VectorDouble_clear(self)

    def get_allocator(self):
        return _rysy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _rysy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _rysy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.VectorDouble_push_back(self, x)

    def front(self):
        return _rysy.VectorDouble_front(self)

    def back(self):
        return _rysy.VectorDouble_back(self)

    def assign(self, n, x):
        return _rysy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _rysy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _rysy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _rysy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _rysy.VectorDouble_capacity(self)
    __swig_destroy__ = _rysy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _rysy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class MatrixInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixInt___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixInt___bool__(self)

    def __len__(self):
        return _rysy.MatrixInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixInt___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixInt_pop(self)

    def append(self, x):
        return _rysy.MatrixInt_append(self, x)

    def empty(self):
        return _rysy.MatrixInt_empty(self)

    def size(self):
        return _rysy.MatrixInt_size(self)

    def swap(self, v):
        return _rysy.MatrixInt_swap(self, v)

    def begin(self):
        return _rysy.MatrixInt_begin(self)

    def end(self):
        return _rysy.MatrixInt_end(self)

    def rbegin(self):
        return _rysy.MatrixInt_rbegin(self)

    def rend(self):
        return _rysy.MatrixInt_rend(self)

    def clear(self):
        return _rysy.MatrixInt_clear(self)

    def get_allocator(self):
        return _rysy.MatrixInt_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixInt_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixInt_push_back(self, x)

    def front(self):
        return _rysy.MatrixInt_front(self)

    def back(self):
        return _rysy.MatrixInt_back(self)

    def assign(self, n, x):
        return _rysy.MatrixInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixInt_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixInt_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixInt
    __del__ = lambda self: None
MatrixInt_swigregister = _rysy.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixUnsignedInt___bool__(self)

    def __len__(self):
        return _rysy.MatrixUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixUnsignedInt_pop(self)

    def append(self, x):
        return _rysy.MatrixUnsignedInt_append(self, x)

    def empty(self):
        return _rysy.MatrixUnsignedInt_empty(self)

    def size(self):
        return _rysy.MatrixUnsignedInt_size(self)

    def swap(self, v):
        return _rysy.MatrixUnsignedInt_swap(self, v)

    def begin(self):
        return _rysy.MatrixUnsignedInt_begin(self)

    def end(self):
        return _rysy.MatrixUnsignedInt_end(self)

    def rbegin(self):
        return _rysy.MatrixUnsignedInt_rbegin(self)

    def rend(self):
        return _rysy.MatrixUnsignedInt_rend(self)

    def clear(self):
        return _rysy.MatrixUnsignedInt_clear(self)

    def get_allocator(self):
        return _rysy.MatrixUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixUnsignedInt_push_back(self, x)

    def front(self):
        return _rysy.MatrixUnsignedInt_front(self)

    def back(self):
        return _rysy.MatrixUnsignedInt_back(self)

    def assign(self, n, x):
        return _rysy.MatrixUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixUnsignedInt_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixUnsignedInt_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixUnsignedInt
    __del__ = lambda self: None
MatrixUnsignedInt_swigregister = _rysy.MatrixUnsignedInt_swigregister
MatrixUnsignedInt_swigregister(MatrixUnsignedInt)

class MatrixFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixFloat___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixFloat___bool__(self)

    def __len__(self):
        return _rysy.MatrixFloat___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixFloat___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixFloat_pop(self)

    def append(self, x):
        return _rysy.MatrixFloat_append(self, x)

    def empty(self):
        return _rysy.MatrixFloat_empty(self)

    def size(self):
        return _rysy.MatrixFloat_size(self)

    def swap(self, v):
        return _rysy.MatrixFloat_swap(self, v)

    def begin(self):
        return _rysy.MatrixFloat_begin(self)

    def end(self):
        return _rysy.MatrixFloat_end(self)

    def rbegin(self):
        return _rysy.MatrixFloat_rbegin(self)

    def rend(self):
        return _rysy.MatrixFloat_rend(self)

    def clear(self):
        return _rysy.MatrixFloat_clear(self)

    def get_allocator(self):
        return _rysy.MatrixFloat_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixFloat_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixFloat_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixFloat_push_back(self, x)

    def front(self):
        return _rysy.MatrixFloat_front(self)

    def back(self):
        return _rysy.MatrixFloat_back(self)

    def assign(self, n, x):
        return _rysy.MatrixFloat_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixFloat_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixFloat_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixFloat_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixFloat_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixFloat
    __del__ = lambda self: None
MatrixFloat_swigregister = _rysy.MatrixFloat_swigregister
MatrixFloat_swigregister(MatrixFloat)

class MatrixDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rysy.MatrixDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rysy.MatrixDouble___nonzero__(self)

    def __bool__(self):
        return _rysy.MatrixDouble___bool__(self)

    def __len__(self):
        return _rysy.MatrixDouble___len__(self)

    def __getslice__(self, i, j):
        return _rysy.MatrixDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rysy.MatrixDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rysy.MatrixDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rysy.MatrixDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rysy.MatrixDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rysy.MatrixDouble___setitem__(self, *args)

    def pop(self):
        return _rysy.MatrixDouble_pop(self)

    def append(self, x):
        return _rysy.MatrixDouble_append(self, x)

    def empty(self):
        return _rysy.MatrixDouble_empty(self)

    def size(self):
        return _rysy.MatrixDouble_size(self)

    def swap(self, v):
        return _rysy.MatrixDouble_swap(self, v)

    def begin(self):
        return _rysy.MatrixDouble_begin(self)

    def end(self):
        return _rysy.MatrixDouble_end(self)

    def rbegin(self):
        return _rysy.MatrixDouble_rbegin(self)

    def rend(self):
        return _rysy.MatrixDouble_rend(self)

    def clear(self):
        return _rysy.MatrixDouble_clear(self)

    def get_allocator(self):
        return _rysy.MatrixDouble_get_allocator(self)

    def pop_back(self):
        return _rysy.MatrixDouble_pop_back(self)

    def erase(self, *args):
        return _rysy.MatrixDouble_erase(self, *args)

    def __init__(self, *args):
        this = _rysy.new_MatrixDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rysy.MatrixDouble_push_back(self, x)

    def front(self):
        return _rysy.MatrixDouble_front(self)

    def back(self):
        return _rysy.MatrixDouble_back(self)

    def assign(self, n, x):
        return _rysy.MatrixDouble_assign(self, n, x)

    def resize(self, *args):
        return _rysy.MatrixDouble_resize(self, *args)

    def insert(self, *args):
        return _rysy.MatrixDouble_insert(self, *args)

    def reserve(self, n):
        return _rysy.MatrixDouble_reserve(self, n)

    def capacity(self):
        return _rysy.MatrixDouble_capacity(self)
    __swig_destroy__ = _rysy.delete_MatrixDouble
    __del__ = lambda self: None
MatrixDouble_swigregister = _rysy.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)

class Getchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Getchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Getchar, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rysy.new_Getchar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Getchar
    __del__ = lambda self: None

    def get(self):
        return _rysy.Getchar_get(self)
Getchar_swigregister = _rysy.Getchar_swigregister
Getchar_swigregister(Getchar)

class ImageLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageLoad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_ImageLoad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ImageLoad
    __del__ = lambda self: None

    def load(self, file_name, load_grayscale=False, normalise=False):
        return _rysy.ImageLoad_load(self, file_name, load_grayscale, normalise)

    def get(self):
        return _rysy.ImageLoad_get(self)

    def width(self):
        return _rysy.ImageLoad_width(self)

    def height(self):
        return _rysy.ImageLoad_height(self)

    def channels(self):
        return _rysy.ImageLoad_channels(self)

    def grayscale(self):
        return _rysy.ImageLoad_grayscale(self)

    def normalise_image(self, min=0.0, max=1.0):
        return _rysy.ImageLoad_normalise_image(self, min, max)
ImageLoad_swigregister = _rysy.ImageLoad_swigregister
ImageLoad_swigregister(ImageLoad)

class ImageSave(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSave, name)
    __repr__ = _swig_repr

    def __init__(self, width, height, grayscale, display_enabled=False):
        this = _rysy.new_ImageSave(width, height, grayscale, display_enabled)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ImageSave
    __del__ = lambda self: None

    def save(self, file_name, v):
        return _rysy.ImageSave_save(self, file_name, v)

    def show(self, v):
        return _rysy.ImageSave_show(self, v)
ImageSave_swigregister = _rysy.ImageSave_swigregister
ImageSave_swigregister(ImageSave)

class JsonConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsonConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsonConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result"] = _rysy.JsonConfig_result_set
    __swig_getmethods__["result"] = _rysy.JsonConfig_result_get
    if _newclass:
        result = _swig_property(_rysy.JsonConfig_result_get, _rysy.JsonConfig_result_set)

    def __init__(self, *args):
        this = _rysy.new_JsonConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_JsonConfig
    __del__ = lambda self: None

    def load(self, json_file_name):
        return _rysy.JsonConfig_load(self, json_file_name)

    def save(self, file_name):
        return _rysy.JsonConfig_save(self, file_name)

    def get_result(self):
        return _rysy.JsonConfig_get_result(self)
JsonConfig_swigregister = _rysy.JsonConfig_swigregister
JsonConfig_swigregister(JsonConfig)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_Log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Log
    __del__ = lambda self: None

    def set_output_file_name(self, file_name):
        return _rysy.Log_set_output_file_name(self, file_name)

    def put_string(self, str):
        return _rysy.Log_put_string(self, str)

    def __lshift__(self, *args):
        return _rysy.Log___lshift__(self, *args)
Log_swigregister = _rysy.Log_swigregister
Log_swigregister(Log)

class SVG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVG, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rysy.new_SVG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_SVG
    __del__ = lambda self: None

    def save(self, file_name):
        return _rysy.SVG_save(self, file_name)

    def add_header(self, width, height):
        return _rysy.SVG_add_header(self, width, height)

    def add_footer(self):
        return _rysy.SVG_add_footer(self)

    def add_rectangle(self, x, y, width, height, swidth, r, g, b, sr, sg, sb):
        return _rysy.SVG_add_rectangle(self, x, y, width, height, swidth, r, g, b, sr, sg, sb)

    def add_circle(self, x, y, radius, swidth, r, g, b, sr, sg, sb):
        return _rysy.SVG_add_circle(self, x, y, radius, swidth, r, g, b, sr, sg, sb)

    def add_line(self, x, y, x_end, y_end, swidth, r, g, b, sr, sg, sb):
        return _rysy.SVG_add_line(self, x, y, x_end, y_end, swidth, r, g, b, sr, sg, sb)

    def add_text(self, x, y, text, size, vertical):
        return _rysy.SVG_add_text(self, x, y, text, size, vertical)

    def add_image_link(self, x, y, width, height, file_name):
        return _rysy.SVG_add_image_link(self, x, y, width, height, file_name)
SVG_swigregister = _rysy.SVG_swigregister
SVG_swigregister(SVG)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rysy.new_Timer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Timer
    __del__ = lambda self: None

    def get_time(self):
        return _rysy.Timer_get_time(self)

    def get_duration(self):
        return _rysy.Timer_get_duration(self)

    def start(self):
        return _rysy.Timer_start(self)

    def stop(self):
        return _rysy.Timer_stop(self)

    def sleep_ms(self, ms_time):
        return _rysy.Timer_sleep_ms(self, ms_time)

    def delay_ms(self, ms_time):
        return _rysy.Timer_delay_ms(self, ms_time)
Timer_swigregister = _rysy.Timer_swigregister
Timer_swigregister(Timer)

class AutoencoderExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoencoderExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoencoderExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _rysy.new_AutoencoderExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_AutoencoderExperiment
    __del__ = lambda self: None

    def run(self):
        return _rysy.AutoencoderExperiment_run(self)
AutoencoderExperiment_swigregister = _rysy.AutoencoderExperiment_swigregister
AutoencoderExperiment_swigregister(AutoencoderExperiment)
cvar = _rysy.cvar

class ClassificationCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_ClassificationCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ClassificationCompare
    __del__ = lambda self: None

    def compare(self, required_value, output_value):
        return _rysy.ClassificationCompare_compare(self, required_value, output_value)

    def set_classes_count(self, classes_count):
        return _rysy.ClassificationCompare_set_classes_count(self, classes_count)

    def set_top_n_count(self, top_n_count_):
        return _rysy.ClassificationCompare_set_top_n_count(self, top_n_count_)

    def clear(self):
        return _rysy.ClassificationCompare_clear(self)

    def process(self, percent_result):
        return _rysy.ClassificationCompare_process(self, percent_result)

    def get_success(self):
        return _rysy.ClassificationCompare_get_success(self)

    def get_summary_result(self):
        return _rysy.ClassificationCompare_get_summary_result(self)

    def get_text_result(self):
        return _rysy.ClassificationCompare_get_text_result(self)

    def get_json_result(self):
        return _rysy.ClassificationCompare_get_json_result(self)

    def save_text_file(self, file_name):
        return _rysy.ClassificationCompare_save_text_file(self, file_name)

    def save_json_file(self, file_name):
        return _rysy.ClassificationCompare_save_json_file(self, file_name)

    def get_confusion_matrix(self):
        return _rysy.ClassificationCompare_get_confusion_matrix(self)

    def get_class_success_rate(self):
        return _rysy.ClassificationCompare_get_class_success_rate(self)

    def get_classes_count(self):
        return _rysy.ClassificationCompare_get_classes_count(self)
ClassificationCompare_swigregister = _rysy.ClassificationCompare_swigregister
ClassificationCompare_swigregister(ClassificationCompare)

class ClassificationExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _rysy.new_ClassificationExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_ClassificationExperiment
    __del__ = lambda self: None

    def run(self):
        return _rysy.ClassificationExperiment_run(self)
ClassificationExperiment_swigregister = _rysy.ClassificationExperiment_swigregister
ClassificationExperiment_swigregister(ClassificationExperiment)

class sHistogramItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sHistogramItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sHistogramItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _rysy.sHistogramItem_count_set
    __swig_getmethods__["count"] = _rysy.sHistogramItem_count_get
    if _newclass:
        count = _swig_property(_rysy.sHistogramItem_count_get, _rysy.sHistogramItem_count_set)
    __swig_setmethods__["normalised_count"] = _rysy.sHistogramItem_normalised_count_set
    __swig_getmethods__["normalised_count"] = _rysy.sHistogramItem_normalised_count_get
    if _newclass:
        normalised_count = _swig_property(_rysy.sHistogramItem_normalised_count_get, _rysy.sHistogramItem_normalised_count_set)
    __swig_setmethods__["value"] = _rysy.sHistogramItem_value_set
    __swig_getmethods__["value"] = _rysy.sHistogramItem_value_get
    if _newclass:
        value = _swig_property(_rysy.sHistogramItem_value_get, _rysy.sHistogramItem_value_set)

    def __init__(self):
        this = _rysy.new_sHistogramItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_sHistogramItem
    __del__ = lambda self: None
sHistogramItem_swigregister = _rysy.sHistogramItem_swigregister
sHistogramItem_swigregister(sHistogramItem)

class Histogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rysy.new_Histogram()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Histogram
    __del__ = lambda self: None

    def add(self, value):
        return _rysy.Histogram_add(self, value)

    def clear(self):
        return _rysy.Histogram_clear(self)

    def compute(self, count=201):
        return _rysy.Histogram_compute(self, count)

    def get_count(self):
        return _rysy.Histogram_get_count(self)

    def get(self, *args):
        return _rysy.Histogram_get(self, *args)

    def asString(self):
        return _rysy.Histogram_asString(self)

    def _print(self):
        return _rysy.Histogram__print(self)

    def save(self, file_name):
        return _rysy.Histogram_save(self, file_name)

    def get_max(self):
        return _rysy.Histogram_get_max(self)

    def get_min(self):
        return _rysy.Histogram_get_min(self)

    def get_average(self):
        return _rysy.Histogram_get_average(self)

    def get_std(self):
        return _rysy.Histogram_get_std(self)
Histogram_swigregister = _rysy.Histogram_swigregister
Histogram_swigregister(Histogram)

class RegressionCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegressionCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegressionCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_RegressionCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_RegressionCompare
    __del__ = lambda self: None

    def set_output_size(self, output_size):
        return _rysy.RegressionCompare_set_output_size(self, output_size)

    def compare(self, required_value, output_value):
        return _rysy.RegressionCompare_compare(self, required_value, output_value)

    def process(self, fixed_bars_count=-1):
        return _rysy.RegressionCompare_process(self, fixed_bars_count)

    def get_error_average(self):
        return _rysy.RegressionCompare_get_error_average(self)

    def get_error_std(self):
        return _rysy.RegressionCompare_get_error_std(self)

    def get_error_average_euclidean(self):
        return _rysy.RegressionCompare_get_error_average_euclidean(self)

    def get_error_std_euclidean(self):
        return _rysy.RegressionCompare_get_error_std_euclidean(self)

    def save_text_file(self, log_file_name_prefix):
        return _rysy.RegressionCompare_save_text_file(self, log_file_name_prefix)

    def save_json_file(self, json_file_name):
        return _rysy.RegressionCompare_save_json_file(self, json_file_name)

    def process_json_result(self):
        return _rysy.RegressionCompare_process_json_result(self)
RegressionCompare_swigregister = _rysy.RegressionCompare_swigregister
RegressionCompare_swigregister(RegressionCompare)

class RegressionExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegressionExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegressionExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _rysy.new_RegressionExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_RegressionExperiment
    __del__ = lambda self: None

    def run(self):
        return _rysy.RegressionExperiment_run(self)
RegressionExperiment_swigregister = _rysy.RegressionExperiment_swigregister
RegressionExperiment_swigregister(RegressionExperiment)

class CNN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_CNN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_CNN
    __del__ = lambda self: None

    def forward(self, *args):
        return _rysy.CNN_forward(self, *args)

    def train_single_output(self, *args):
        return _rysy.CNN_train_single_output(self, *args)

    def train(self, *args):
        return _rysy.CNN_train(self, *args)

    def set_training_mode(self):
        return _rysy.CNN_set_training_mode(self)

    def unset_training_mode(self):
        return _rysy.CNN_unset_training_mode(self)

    def reset_state(self):
        return _rysy.CNN_reset_state(self)

    def set_learning_rate(self, learning_rate):
        return _rysy.CNN_set_learning_rate(self, learning_rate)

    def set_lambda1(self, arg2):
        return _rysy.CNN_set_lambda1(self, arg2)

    def set_lambda2(self, arg2):
        return _rysy.CNN_set_lambda2(self, arg2)

    def get_learning_rate(self):
        return _rysy.CNN_get_learning_rate(self)

    def get_lambda1(self):
        return _rysy.CNN_get_lambda1(self)

    def get_lambda2(self):
        return _rysy.CNN_get_lambda2(self)

    def save(self, file_name_prefix):
        return _rysy.CNN_save(self, file_name_prefix)

    def load_weights(self, file_name_prefix):
        return _rysy.CNN_load_weights(self, file_name_prefix)
CNN_swigregister = _rysy.CNN_swigregister
CNN_swigregister(CNN)

class Preprocessing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Preprocessing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Preprocessing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rysy.new_Preprocessing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_Preprocessing
    __del__ = lambda self: None

    def init(self, json, input_geometry):
        return _rysy.Preprocessing_init(self, json, input_geometry)

    def process(self, output, input, augumentation=0):
        return _rysy.Preprocessing_process(self, output, input, augumentation)
Preprocessing_swigregister = _rysy.Preprocessing_swigregister
Preprocessing_swigregister(Preprocessing)

class sDatasetItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sDatasetItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sDatasetItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _rysy.sDatasetItem_input_set
    __swig_getmethods__["input"] = _rysy.sDatasetItem_input_get
    if _newclass:
        input = _swig_property(_rysy.sDatasetItem_input_get, _rysy.sDatasetItem_input_set)
    __swig_setmethods__["output"] = _rysy.sDatasetItem_output_set
    __swig_getmethods__["output"] = _rysy.sDatasetItem_output_get
    if _newclass:
        output = _swig_property(_rysy.sDatasetItem_output_get, _rysy.sDatasetItem_output_set)

    def __init__(self):
        this = _rysy.new_sDatasetItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_sDatasetItem
    __del__ = lambda self: None
sDatasetItem_swigregister = _rysy.sDatasetItem_swigregister
sDatasetItem_swigregister(sDatasetItem)

class DatasetInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rysy.new_DatasetInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetInterface
    __del__ = lambda self: None

    def _print(self):
        return _rysy.DatasetInterface__print(self)

    def get_random_training(self):
        return _rysy.DatasetInterface_get_random_training(self)

    def get_training(self, class_idx, idx):
        return _rysy.DatasetInterface_get_training(self, class_idx, idx)

    def get_class_items_count(self, class_idx):
        return _rysy.DatasetInterface_get_class_items_count(self, class_idx)

    def get_testing(self, idx):
        return _rysy.DatasetInterface_get_testing(self, idx)

    def get_random_testing(self):
        return _rysy.DatasetInterface_get_random_testing(self)

    def get_unlabeled(self, idx):
        return _rysy.DatasetInterface_get_unlabeled(self, idx)

    def get_random_unlabeled(self):
        return _rysy.DatasetInterface_get_random_unlabeled(self)

    def get_training_size(self):
        return _rysy.DatasetInterface_get_training_size(self)

    def get_testing_size(self):
        return _rysy.DatasetInterface_get_testing_size(self)

    def get_unlabeled_size(self):
        return _rysy.DatasetInterface_get_unlabeled_size(self)

    def get_input_size(self):
        return _rysy.DatasetInterface_get_input_size(self)

    def get_output_size(self):
        return _rysy.DatasetInterface_get_output_size(self)

    def get_width(self):
        return _rysy.DatasetInterface_get_width(self)

    def get_height(self):
        return _rysy.DatasetInterface_get_height(self)

    def get_channels(self):
        return _rysy.DatasetInterface_get_channels(self)

    def print_testing_item(self, idx):
        return _rysy.DatasetInterface_print_testing_item(self, idx)

    def export_h_testing(self, file_name, count):
        return _rysy.DatasetInterface_export_h_testing(self, file_name, count)

    def save_to_json(self, file_name):
        return _rysy.DatasetInterface_save_to_json(self, file_name)

    def save_to_txt_training(self, file_name):
        return _rysy.DatasetInterface_save_to_txt_training(self, file_name)

    def save_to_txt_testing(self, file_name):
        return _rysy.DatasetInterface_save_to_txt_testing(self, file_name)

    def save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name):
        return _rysy.DatasetInterface_save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name)

    def save_images(self, training_file_name_prefix, testing_file_name_prefix):
        return _rysy.DatasetInterface_save_images(self, training_file_name_prefix, testing_file_name_prefix)
DatasetInterface_swigregister = _rysy.DatasetInterface_swigregister
DatasetInterface_swigregister(DatasetInterface)

class DatasetBinary(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetBinary, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetBinary, name)
    __repr__ = _swig_repr

    def __init__(self, training_file_name, testing_file_name):
        this = _rysy.new_DatasetBinary(training_file_name, testing_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetBinary
    __del__ = lambda self: None
DatasetBinary_swigregister = _rysy.DatasetBinary_swigregister
DatasetBinary_swigregister(DatasetBinary)

class DatasetImages(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetImages, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetImages, name)
    __repr__ = _swig_repr

    def __init__(self, json_config_file_name):
        this = _rysy.new_DatasetImages(json_config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetImages
    __del__ = lambda self: None
DatasetImages_swigregister = _rysy.DatasetImages_swigregister
DatasetImages_swigregister(DatasetImages)

class DatasetMnist(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetMnist, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetMnist, name)
    __repr__ = _swig_repr

    def __init__(self, training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name, make_1d=False):
        this = _rysy.new_DatasetMnist(training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name, make_1d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetMnist
    __del__ = lambda self: None
DatasetMnist_swigregister = _rysy.DatasetMnist_swigregister
DatasetMnist_swigregister(DatasetMnist)

class DatasetPair(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPair, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPair, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, training_size_=-1, testing_size_=-1):
        this = _rysy.new_DatasetPair(dataset, training_size_, testing_size_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetPair
    __del__ = lambda self: None
DatasetPair_swigregister = _rysy.DatasetPair_swigregister
DatasetPair_swigregister(DatasetPair)

class DatasetPreprocessing(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPreprocessing, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPreprocessing, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_file_name):
        this = _rysy.new_DatasetPreprocessing(dataset, config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetPreprocessing
    __del__ = lambda self: None
DatasetPreprocessing_swigregister = _rysy.DatasetPreprocessing_swigregister
DatasetPreprocessing_swigregister(DatasetPreprocessing)

class DatasetTicTacToe(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetTicTacToe, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetTicTacToe, name)
    __repr__ = _swig_repr

    def __init__(self, data_file_name, testing_ratio=0.5, padding=0):
        this = _rysy.new_DatasetTicTacToe(data_file_name, testing_ratio, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rysy.delete_DatasetTicTacToe
    __del__ = lambda self: None
DatasetTicTacToe_swigregister = _rysy.DatasetTicTacToe_swigregister
DatasetTicTacToe_swigregister(DatasetTicTacToe)

# This file is compatible with both classic and new-style classes.


